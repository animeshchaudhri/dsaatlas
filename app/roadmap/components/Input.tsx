"use client";
import { stringify } from "querystring";
import Mermaid, { MermaidProps } from "./Mermaid";
import React, { useState, useEffect } from "react";

function Input() {
  const [generatedContent, setGeneratedContent] = useState("");
  const [userInput, setUserInput] = useState("Roadmap");

  const data = `graph LR
  style A fill:#f9f,stroke:#333,stroke-width:4px
  style B, C, D, E, F, G, H fill:#f9f,stroke:#333,stroke-width:2px
  style I, J, K, L, M, N, O, P, Q, R, S, T, U fill:#f9f,stroke:#333,stroke-width:2px
  style B1, B2, B3, C1, C2, C3, D1, D2, E1, E2, E3, F1, F2, G1, G2, G3, G4, G5, G6, H1, H2, H3, H4, H5 fill:#f9f,stroke:#333,stroke-width:2px
  linkStyle default stroke:green;

  A[Start] --> B(Array)
  A --> C(Linked List)
  A --> D(Stack)
  A --> E(Queue)
  A --> F(Hash Table)
  A --> G(Tree)
  A --> H(Graph)
  B --> I(Searching)
  C --> I
  D --> I
  E --> I
  F --> I
  G --> I
  H --> I
  I --> J(Sorting)
  J --> K(Comparison Sort)
  J --> L(Non-comparison Sort)
  K --> M(Bubble Sort)
  K --> N(Selection Sort)
  K --> O(Insertion Sort)
  K --> P(Merge Sort)
  K --> Q(Quick Sort)
  K --> R(Heap Sort)
  L --> S(Counting Sort)
  L --> T(Radix Sort)
  L --> U(Bucket Sort)

  B1[Linear Search] --> B2[Binary Search] --> B3[Ternary Search]
  C1[Singly Linked List] --> C2[Doubly Linked List] --> C3[Circular Linked List]
  D1[Array-based Stack] --> D2[Linked List-based Stack]
  E1[Array-based Queue] --> E2[Linked List-based Queue] --> E3[Circular Queue]
  F1[Chaining] --> F2[Open Addressing]
  G1[Binary Tree] --> G2[Binary Search Tree] --> G3[AVL Tree] --> G4[Red-Black Tree] --> G5[B-Tree] --> G6[Trie]
  H1[Adjacency List] --> H2[Adjacency Matrix] --> H3[Graph Traversal] --> H4[Shortest Path] --> H5[Minimum Spanning Tree]

  H3 --> DFS
  H3 --> BFS
  H4 --> Dijkstra
  H4 --> Bellman-Ford
  H5 --> Prim
  H5 --> Kruskal

  K1[Bubble Sort] --> K2[Selection Sort] --> K3[Insertion Sort] --> K4[Merge Sort] --> K5[Quick Sort] --> K6[Heap Sort]
  L1[Counting Sort] --> L2[Radix Sort] --> L3[Bucket Sort]
`;
  const [mermaidProps, setMermaidProps] = useState({ text: data });
  useEffect(() => {
    const mermaidCode = generatedContent
      .replace("```mermaid", "")
      .replace("```", "");

    console.log(mermaidCode); // Log mermaidCode to the console

    setMermaidProps({ text: mermaidCode });
  }, [generatedContent]);

  const handleClick = async () => {
    try {
      const context =
        'Flowcharts Syntax | Mermaid\n\nURL Source: https://mermaid.js.org/syntax/flowchart.html\n\nMarkdown Content:\nFlowcharts are composed of **nodes** (geometric shapes) and **edges** (arrows or lines). The Mermaid code defines how nodes and edges are made and accommodates different arrow types, multi-directional arrows, and any linking to and from subgraphs.\n\nWARNING\n\nIf you are using the word "end" in a Flowchart node, capitalize the entire word or any of the letters (e.g., "End" or "END"), or apply this [workaround](https://github.com/mermaid-js/mermaid/issues/1444#issuecomment-639528897). Typing "end" in all lowercase letters will break the Flowchart.\n\nWARNING\n\nIf you are using the letter "o" or "x" as the first letter in a connecting Flowchart node, add a space before the letter or capitalize the letter (e.g., "dev--- ops", "dev---Ops").\n\nTyping "A---oB" will create a [circle edge](#circle-edge-example).\n\nTyping "A---xB" will create a [cross edge](#cross-edge-example).\n\n### A node (default) [​](#a-node-default)\n\n##### Code:\n\nmermaid\n\n    ---\n    title: Node\n    ---\n    flowchart LR\n        id\n    \n\nCtrl + Enter|\n\nINFO\n\nThe id is what is displayed in the box.\n\nTIP\n\nInstead of `flowchart` one can also use `graph`.\n\n### A node with text [​](#a-node-with-text)\n\nIt is also possible to set text in the box that differs from the id. If this is done several times, it is the last text found for the node that will be used. Also if you define edges for the node later on, you can omit text definitions. The one previously defined will be used when rendering the box.\n\n##### Code:\n\nmermaid\n\n    ---\n    title: Node with text\n    ---\n    flowchart LR\n        id1[This is the text in the box]\n    \n\nCtrl + Enter|\n\n#### Unicode text [​](#unicode-text)\n\nUse `"` to enclose the unicode text.\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        id["This ❤ Unicode"]\n    \n\nCtrl + Enter|\n\n#### Markdown formatting [​](#markdown-formatting)\n\nUse double quotes and backticks "\\` text \\`" to enclose the markdown text.\n\n##### Code:\n\nmermaid\n\n    %%{init: {"flowchart": {"htmlLabels": false}} }%%\n    flowchart LR\n        markdown["`This **is** _Markdown_`"]\n        newLines["`Line1\n        Line 2\n        Line 3`"]\n        markdown --> newLines\n    \n\nCtrl + Enter|\n\n### Direction [​](#direction)\n\nThis statement declares the direction of the Flowchart.\n\nThis declares the flowchart is oriented from top to bottom (`TD` or `TB`).\n\n##### Code:\n\nmermaid\n\n    flowchart TD\n        Start --> Stop\n    \n\nCtrl + Enter|\n\nThis declares the flowchart is oriented from left to right (`LR`).\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        Start --> Stop\n    \n\nCtrl + Enter|\n\nPossible FlowChart orientations are:\n\n*   TB - Top to bottom\n*   TD - Top-down/ same as top to bottom\n*   BT - Bottom to top\n*   RL - Right to left\n*   LR - Left to right\n\nNode shapes [​](#node-shapes)\n-----------------------------\n\n### A node with round edges [​](#a-node-with-round-edges)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        id1(This is the text in the box)\n    \n\nCtrl + Enter|\n\n### A stadium-shaped node [​](#a-stadium-shaped-node)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        id1([This is the text in the box])\n    \n\nCtrl + Enter|\n\n### A node in a subroutine shape [​](#a-node-in-a-subroutine-shape)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        id1[[This is the text in the box]]\n    \n\nCtrl + Enter|\n\n### A node in a cylindrical shape [​](#a-node-in-a-cylindrical-shape)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        id1[(Database)]\n    \n\nCtrl + Enter|\n\n### A node in the form of a circle [​](#a-node-in-the-form-of-a-circle)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        id1((This is the text in the circle))\n    \n\nCtrl + Enter|\n\n### A node in an asymmetric shape [​](#a-node-in-an-asymmetric-shape)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        id1>This is the text in the box]\n    \n\nCtrl + Enter|\n\nCurrently only the shape above is possible and not its mirror. _This might change with future releases._\n\n### A node (rhombus) [​](#a-node-rhombus)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        id1{This is the text in the box}\n    \n\nCtrl + Enter|\n\n### A hexagon node [​](#a-hexagon-node)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        id1{{This is the text in the box}}\n    \n\nCtrl + Enter|\n\n### Parallelogram [​](#parallelogram)\n\n##### Code:\n\nmermaid\n\n    flowchart TD\n        id1[/This is the text in the box/]\n    \n\nCtrl + Enter|\n\n### Parallelogram alt [​](#parallelogram-alt)\n\n##### Code:\n\nmermaid\n\n    flowchart TD\n        id1[\\This is the text in the box\\]\n    \n\nCtrl + Enter|\n\n### Trapezoid [​](#trapezoid)\n\n##### Code:\n\nmermaid\n\n    flowchart TD\n        A[/Christmas\\]\n    \n\nCtrl + Enter|\n\n### Trapezoid alt [​](#trapezoid-alt)\n\n##### Code:\n\nmermaid\n\n    flowchart TD\n        B[\\Go shopping/]\n    \n\nCtrl + Enter|\n\n### Double circle [​](#double-circle)\n\n##### Code:\n\nmermaid\n\n    flowchart TD\n        id1(((This is the text in the circle)))\n    \n\nCtrl + Enter|\n\nLinks between nodes [​](#links-between-nodes)\n---------------------------------------------\n\nNodes can be connected with links/edges. It is possible to have different types of links or attach a text string to a link.\n\n### A link with arrow head [​](#a-link-with-arrow-head)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A-->B\n    \n\nCtrl + Enter|\n\n### An open link [​](#an-open-link)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A --- B\n    \n\nCtrl + Enter|\n\n### Text on links [​](#text-on-links)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A-- This is the text! ---B\n    \n\nCtrl + Enter|\n\nor\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A---|This is the text|B\n    \n\nCtrl + Enter|\n\n### A link with arrow head and text [​](#a-link-with-arrow-head-and-text)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A-->|text|B\n    \n\nCtrl + Enter|\n\nor\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A-- text -->B\n    \n\nCtrl + Enter|\n\n### Dotted link [​](#dotted-link)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n       A-.->B;\n    \n\nCtrl + Enter|\n\n### Dotted link with text [​](#dotted-link-with-text)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n       A-. text .-> B\n    \n\nCtrl + Enter|\n\n### Thick link [​](#thick-link)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n       A ==> B\n    \n\nCtrl + Enter|\n\n### Thick link with text [​](#thick-link-with-text)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n       A == text ==> B\n    \n\nCtrl + Enter|\n\n### An invisible link [​](#an-invisible-link)\n\nThis can be a useful tool in some instances where you want to alter the default positioning of a node.\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A ~~~ B\n    \n\nCtrl + Enter|\n\n### Chaining of links [​](#chaining-of-links)\n\nIt is possible declare many links in the same line as per below:\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n       A -- text --> B -- text2 --> C\n    \n\nCtrl + Enter|\n\nIt is also possible to declare multiple nodes links in the same line as per below:\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n       a --> b & c--> d\n    \n\nCtrl + Enter|\n\nYou can then describe dependencies in a very expressive way. Like the one-liner below:\n\n##### Code:\n\nmermaid\n\n    flowchart TB\n        A & B--> C & D\n    \n\nCtrl + Enter|\n\nIf you describe the same diagram using the basic syntax, it will take four lines. A word of warning, one could go overboard with this making the flowchart harder to read in markdown form. The Swedish word `lagom` comes to mind. It means, not too much and not too little. This goes for expressive syntaxes as well.\n\n##### Code:\n\nmermaid\n\n    flowchart TB\n        A --> C\n        A --> D\n        B --> C\n        B --> D\n    \n\nCtrl + Enter|\n\nNew arrow types [​](#new-arrow-types)\n-------------------------------------\n\nThere are new types of arrows supported:\n\n*   circle edge\n*   cross edge\n\n### Circle edge example [​](#circle-edge-example)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A --o B\n    \n\nCtrl + Enter|\n\n### Cross edge example [​](#cross-edge-example)\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A --x B\n    \n\nCtrl + Enter|\n\nMulti directional arrows [​](#multi-directional-arrows)\n-------------------------------------------------------\n\nThere is the possibility to use multidirectional arrows.\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A o--o B\n        B <--> C\n        C x--x D\n    \n\nCtrl + Enter|\n\n### Minimum length of a link [​](#minimum-length-of-a-link)\n\nEach node in the flowchart is ultimately assigned to a rank in the rendered graph, i.e. to a vertical or horizontal level (depending on the flowchart orientation), based on the nodes to which it is linked. By default, links can span any number of ranks, but you can ask for any link to be longer than the others by adding extra dashes in the link definition.\n\nIn the following example, two extra dashes are added in the link from node _B_ to node _E_, so that it spans two more ranks than regular links:\n\n##### Code:\n\nmermaid\n\n    flowchart TD\n        A[Start] --> B{Is it?}\n        B -->|Yes| C[OK]\n        C --> D[Rethink]\n        D --> B\n        B ---->|No| E[End]\n    \n\nCtrl + Enter|\n\n> **Note** Links may still be made longer than the requested number of ranks by the rendering engine to accommodate other requests.\n\nWhen the link label is written in the middle of the link, the extra dashes must be added on the right side of the link. The following example is equivalent to the previous one:\n\n##### Code:\n\nmermaid\n\n    flowchart TD\n        A[Start] --> B{Is it?}\n        B -- Yes --> C[OK]\n        C --> D[Rethink]\n        D --> B\n        B -- No ----> E[End]\n    \n\nCtrl + Enter|\n\nFor dotted or thick links, the characters to add are equals signs or dots, as summed up in the following table:\n\n| Length | 1 | 2 | 3 |\n| --- | --- | --- | --- |\n| Normal | `---` | `----` | `-----` |\n| Normal with arrow | `-->` | `--->` | `---->` |\n| Thick | `===` | `====` | `=====` |\n| Thick with arrow | `==>` | `===>` | `====>` |\n| Dotted | `-.-` | `-..-` | `-...-` |\n| Dotted with arrow | `-.->` | `-..->` | `-...->` |\n\nSpecial characters that break syntax [​](#special-characters-that-break-syntax)\n-------------------------------------------------------------------------------\n\nIt is possible to put text within quotes in order to render more troublesome characters. As in the example below:\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        id1["This is the (text) in the box"]\n    \n\nCtrl + Enter|\n\n### Entity codes to escape characters [​](#entity-codes-to-escape-characters)\n\nIt is possible to escape characters using the syntax exemplified here.\n\n##### Code:\n\nmermaid\n\n        flowchart LR\n            A["A double quote:#quot;"] --> B["A dec char:#9829;"]\n    \n\nCtrl + Enter|\n\nNumbers given are base 10, so `#` can be encoded as `#35;`. It is also supported to use HTML character names.\n\nSubgraphs [​](#subgraphs)\n-------------------------\n\n    subgraph title\n        graph definition\n    end\n    \n\nAn example below:\n\n##### Code:\n\nmermaid\n\n    flowchart TB\n        c1-->a2\n        subgraph one\n        a1-->a2\n        end\n        subgraph two\n        b1-->b2\n        end\n        subgraph three\n        c1-->c2\n        end\n    \n\nCtrl + Enter|\n\nYou can also set an explicit id for the subgraph.\n\n##### Code:\n\nmermaid\n\n    flowchart TB\n        c1-->a2\n        subgraph ide1 [one]\n        a1-->a2\n        end\n    \n\nCtrl + Enter|\n\n### flowcharts [​](#flowcharts)\n\nWith the graphtype flowchart it is also possible to set edges to and from subgraphs as in the flowchart below.\n\n##### Code:\n\nmermaid\n\n    flowchart TB\n        c1-->a2\n        subgraph one\n        a1-->a2\n        end\n        subgraph two\n        b1-->b2\n        end\n        subgraph three\n        c1-->c2\n        end\n        one --> two\n        three --> two\n        two --> c2\n    \n\nCtrl + Enter|\n\n### Direction in subgraphs [​](#direction-in-subgraphs)\n\nWith the graphtype flowcharts you can use the direction statement to set the direction which the subgraph will render like in this example.\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n      subgraph TOP\n        direction TB\n        subgraph B1\n            direction RL\n            i1 -->f1\n        end\n        subgraph B2\n            direction BT\n            i2 -->f2\n        end\n      end\n      A --> TOP --> B\n      B1 --> B2\n    \n\nCtrl + Enter|\n\n#### Limitation [​](#limitation)\n\nIf any of a subgraph\'s nodes are linked to the outside, subgraph direction will be ignored. Instead the subgraph will inherit the direction of the parent graph:\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        subgraph subgraph1\n            direction TB\n            top1[top] --> bottom1[bottom]\n        end\n        subgraph subgraph2\n            direction TB\n            top2[top] --> bottom2[bottom]\n        end\n        %% ^ These subgraphs are identical, except for the links to them:\n    \n        %% Link *to* subgraph1: subgraph1 direction is maintained\n        outside --> subgraph1\n        %% Link *within* subgraph2:\n        %% subgraph2 inherits the direction of the top-level graph (LR)\n        outside ---> top2\n    \n\nCtrl + Enter|\n\nMarkdown Strings [​](#markdown-strings)\n---------------------------------------\n\nThe "Markdown Strings" feature enhances flowcharts and mind maps by offering a more versatile string type, which supports text formatting options such as bold and italics, and automatically wraps text within labels.\n\n##### Code:\n\nmermaid\n\n    %%{init: {"flowchart": {"htmlLabels": false}} }%%\n    flowchart LR\n    subgraph "One"\n      a("`The **cat**\n      in the hat`") -- "edge label" --> b{{"`The **dog** in the hog`"}}\n    end\n    subgraph "`**Two**`"\n      c("`The **cat**\n      in the hat`") -- "`Bold **edge label**`" --> d("The dog in the hog")\n    end\n    \n\nCtrl + Enter|\n\nFormatting:\n\n*   For bold text, use double asterisks (`**`) before and after the text.\n*   For italics, use single asterisks (`*`) before and after the text.\n*   With traditional strings, you needed to add `<br>` tags for text to wrap in nodes. However, markdown strings automatically wrap text when it becomes too long and allows you to start a new line by simply using a newline character instead of a `<br>` tag.\n\nThis feature is applicable to node labels, edge labels, and subgraph labels.\n\nInteraction [​](#interaction)\n-----------------------------\n\nIt is possible to bind a click event to a node, the click can lead to either a javascript callback or to a link which will be opened in a new browser tab.\n\nINFO\n\nThis functionality is disabled when using `securityLevel=\'strict\'` and enabled when using `securityLevel=\'loose\'`.\n\n    click nodeId callback\n    click nodeId call callback()\n    \n\n*   nodeId is the id of the node\n*   callback is the name of a javascript function defined on the page displaying the graph, the function will be called with the nodeId as parameter.\n\nExamples of tooltip usage below:\n\nhtml\n\n    <script>\n      window.callback = function () {\n        alert(\'A callback was triggered\');\n      };\n    </script>\n\nThe tooltip text is surrounded in double quotes. The styles of the tooltip are set by the class `.mermaidTooltip`.\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A-->B\n        B-->C\n        C-->D\n        click A callback "Tooltip for a callback"\n        click B "https://www.github.com" "This is a tooltip for a link"\n        click C call callback() "Tooltip for a callback"\n        click D href "https://www.github.com" "This is a tooltip for a link"\n    \n\nCtrl + Enter|\n\n> **Success** The tooltip functionality and the ability to link to urls are available from version 0.5.2.\n\n?> Due to limitations with how Docsify handles JavaScript callback functions, an alternate working demo for the above code can be viewed at [this jsfiddle](https://jsfiddle.net/yk4h7qou/2/).\n\nLinks are opened in the same browser tab/window by default. It is possible to change this by adding a link target to the click definition (`_self`, `_blank`, `_parent` and `_top` are supported):\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A-->B\n        B-->C\n        C-->D\n        D-->E\n        click A "https://www.github.com" _blank\n        click B "https://www.github.com" "Open this in a new tab" _blank\n        click C href "https://www.github.com" _blank\n        click D href "https://www.github.com" "Open this in a new tab" _blank\n    \n\nCtrl + Enter|\n\nBeginner\'s tip—a full example using interactive links in a html context:\n\nhtml\n\n    <body>\n      <pre class="mermaid">\n        flowchart LR\n            A-->B\n            B-->C\n            C-->D\n            click A callback "Tooltip"\n            click B "https://www.github.com" "This is a link"\n            click C call callback() "Tooltip"\n            click D href "https://www.github.com" "This is a link"\n      </pre>\n    \n      <script>\n        window.callback = function () {\n          alert(\'A callback was triggered\');\n        };\n        const config = {\n          startOnLoad: true,\n          flowchart: { useMaxWidth: true, htmlLabels: true, curve: \'cardinal\' },\n          securityLevel: \'loose\',\n        };\n        mermaid.initialize(config);\n      </script>\n    </body>\n\n### Comments [​](#comments)\n\nComments can be entered within a flow diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with `%%` (double percent signs). Any text after the start of the comment to the next newline will be treated as a comment, including any flow syntax\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n    %% this is a comment A -- text --> B{node}\n       A -- text --> B -- text2 --> C\n    \n\nCtrl + Enter|\n\nStyling and classes [​](#styling-and-classes)\n---------------------------------------------\n\n### Styling links [​](#styling-links)\n\nIt is possible to style links. For instance, you might want to style a link that is going backwards in the flow. As links have no ids in the same way as nodes, some other way of deciding what style the links should be attached to is required. Instead of ids, the order number of when the link was defined in the graph is used, or use default to apply to all links. In the example below the style defined in the linkStyle statement will belong to the fourth link in the graph:\n\n    linkStyle 3 stroke:#ff3,stroke-width:4px,color:red;\n    \n\nIt is also possible to add style to multiple links in a single statement, by separating link numbers with commas:\n\n    linkStyle 1,2,7 color:blue;\n    \n\n### Styling line curves [​](#styling-line-curves)\n\nIt is possible to style the type of curve used for lines between items, if the default method does not meet your needs. Available curve styles include `basis`, `bumpX`, `bumpY`, `cardinal`, `catmullRom`, `linear`, `monotoneX`, `monotoneY`, `natural`, `step`, `stepAfter`, and `stepBefore`.\n\nIn this example, a left-to-right graph uses the `stepBefore` curve style:\n\n    %%{ init: { \'flowchart\': { \'curve\': \'stepBefore\' } } }%%\n    graph LR\n    \n\nFor a full list of available curves, including an explanation of custom curves, refer to the [Shapes](https://github.com/d3/d3-shape/blob/main/README.md#curves) documentation in the [d3-shape](https://github.com/d3/d3-shape/) project.\n\n### Styling a node [​](#styling-a-node)\n\nIt is possible to apply specific styles such as a thicker border or a different background color to a node.\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        id1(Start)-->id2(Stop)\n        style id1 fill:#f9f,stroke:#333,stroke-width:4px\n        style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n    \n\nCtrl + Enter|\n\n#### Classes [​](#classes)\n\nMore convenient than defining the style every time is to define a class of styles and attach this class to the nodes that should have a different look.\n\nA class definition looks like the example below:\n\n        classDef className fill:#f9f,stroke:#333,stroke-width:4px;\n    \n\nAlso, it is possible to define style to multiple classes in one statement:\n\n        classDef firstClassName,secondClassName font-size:12pt;\n    \n\nAttachment of a class to a node is done as per below:\n\n        class nodeId1 className;\n    \n\nIt is also possible to attach a class to a list of nodes in one statement:\n\n        class nodeId1,nodeId2 className;\n    \n\nA shorter form of adding a class is to attach the classname to the node using the `:::`operator as per below:\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A:::someclass --> B\n        classDef someclass fill:#f96\n    \n\nCtrl + Enter|\n\nThis form can be used when declaring multiple links between nodes:\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A:::foo & B:::bar --> C:::foobar\n        classDef foo stroke:#f00\n        classDef bar stroke:#0f0\n        classDef foobar stroke:#00f\n    \n\nCtrl + Enter|\n\n### CSS classes [​](#css-classes)\n\nIt is also possible to predefine classes in CSS styles that can be applied from the graph definition as in the example below:\n\n**Example style**\n\nhtml\n\n    <style>\n      .cssClass > rect {\n        fill: #ff0000;\n        stroke: #ffff00;\n        stroke-width: 4px;\n      }\n    </style>\n\n**Example definition**\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A-->B[AAA<span>BBB</span>]\n        B-->D\n        class A cssClass\n    \n\nCtrl + Enter|\n\n### Default class [​](#default-class)\n\nIf a class is named default it will be assigned to all classes without specific class definitions.\n\n        classDef default fill:#f9f,stroke:#333,stroke-width:4px;\n    \n\nBasic support for fontawesome [​](#basic-support-for-fontawesome)\n-----------------------------------------------------------------\n\nIt is possible to add icons from fontawesome.\n\nThe icons are accessed via the syntax fa:#icon class name#.\n\n##### Code:\n\nmermaid\n\n    flowchart TD\n        B["fa:fa-twitter for peace"]\n        B-->C[fa:fa-ban forbidden]\n        B-->D(fa:fa-spinner)\n        B-->E(A fa:fa-camera-retro perhaps?)\n    \n\nCtrl + Enter|\n\nMermaid supports Font Awesome if the CSS is included on the website. Mermaid does not have any restriction on the version of Font Awesome that can be used.\n\nPlease refer the [Official Font Awesome Documentation](https://fontawesome.com/start) on how to include it in your website.\n\nAdding this snippet in the `<head>` would add support for Font Awesome v6.5.1\n\nhtml\n\n    <link\n      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"\n      rel="stylesheet"\n    />\n\nGraph declarations with spaces between vertices and link and without semicolon [​](#graph-declarations-with-spaces-between-vertices-and-link-and-without-semicolon)\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n*   In graph declarations, the statements also can now end without a semicolon. After release 0.2.16, ending a graph statement with semicolon is just optional. So the below graph declaration is also valid along with the old declarations of the graph.\n    \n*   A single space is allowed between vertices and the link. However there should not be any space between a vertex and its text and a link and its text. The old syntax of graph declaration will also work and hence this new feature is optional and is introduced to improve readability.\n    \n\nBelow is the new declaration of the graph edges which is also valid along with the old declaration of the graph edges.\n\n##### Code:\n\nmermaid\n\n    flowchart LR\n        A[Hard edge] -->|Link text| B(Round edge)\n        B --> C{Decision}\n        C -->|One| D[Result one]\n        C -->|Two| E[Result two]\n    \n\nCtrl + Enter|\n\nConfiguration [​](#configuration)\n---------------------------------\n\n### Renderer [​](#renderer)\n\nThe layout of the diagram is done with the renderer. The default renderer is dagre.\n\nStarting with Mermaid version 9.4, you can use an alternate renderer named elk. The elk renderer is better for larger and/or more complex diagrams.\n\nThe _elk_ renderer is an experimental feature. You can change the renderer to elk by adding this directive:\n\n    %%{init: {"flowchart": {"defaultRenderer": "elk"}} }%%\n    \n\nINFO\n\nNote that the site needs to use mermaid version 9.4+ for this to work and have this featured enabled in the lazy-loading configuration.\n\n### Width [​](#width)\n\nIt is possible to adjust the width of the rendered flowchart.\n\nThis is done by defining **mermaid.flowchartConfig** or by the CLI to use a JSON file with the configuration. How to use the CLI is described in the mermaidCLI page. mermaid.flowchartConfig can be set to a JSON string with config parameters or the corresponding object.\n\njavascript\n\n    mermaid.flowchartConfig = {\n        width: 100%\n    }\n';

      const userInputString = `make mermaid js markdown make sure the syntax is correct only give code as ouptut for title "${userInput}" make it clear and detailed  `;
      const res = await fetch("api/chat", {
        method: "POST",

        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ userInput: userInputString }),
      });

      if (!res.ok) {
        throw new Error("Failed to fetch");
      }

      const data = await res.json();
      console.log(data);
      setGeneratedContent(data.text);
    } catch (error) {
      console.error("Error:", error);
    }
  };

  useEffect(() => {
    setUserInput("Roadmap");
  }, []);

  const handleChange = (event: any) => {
    setUserInput(event.target.value);
  };

  return (
    <>
      <div className="flex flex-col items-center justify-center gap-10">
        <div className="flex flex-col  items-center gap-4 mt-6">
          <h1 className="text-4xl">Generate your very own Roadmap</h1>
          <div className="flex gap-4">
            <input
              type="text"
              className="w-80 h-10 px-3 rounded-lg border-2 border-purple-500 bg-gray-900 text-purple-500 placeholder-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              placeholder="What's on your mind?"
              value={userInput}
              onChange={handleChange} // Add onChange event handler to update userInput state
            />
            <button
              className="px-4 py-2 bg-blue-600 hover:bg-blue-700 transition duration-200 rounded-lg text-white shadow-[0px_2px_0px_0px_#FFFFFF40_inset]"
              onClick={handleClick} // Add onClick event handler
            >
              Generate
            </button>
          </div>
          {/* <div className="mt-4 text-gray-500">{generatedContent}</div> */}
          {/* <p>{mermaidProps}</p> */}
        </div>

        <Mermaid {...mermaidProps} />
      </div>
    </>
  );
}

export default Input;
